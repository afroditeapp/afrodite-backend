/*
 * afrodite-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_media_content_pending_moderation_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMediaContentPendingModerationListError {
    Status401(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_media_content_face_detected_value`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostMediaContentFaceDetectedValueError {
    Status401(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_moderate_media_content`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostModerateMediaContentError {
    Status401(),
    Status500(),
    UnknownValue(serde_json::Value),
}


pub async fn get_media_content_pending_moderation_list(configuration: &configuration::Configuration, content_type: models::MediaContentType, queue: models::ModerationQueueType, show_content_which_bots_can_moderate: bool) -> Result<models::GetMediaContentPendingModerationList, Error<GetMediaContentPendingModerationListError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_content_type = content_type;
    let p_query_queue = queue;
    let p_query_show_content_which_bots_can_moderate = show_content_which_bots_can_moderate;

    let uri_str = format!("{}/media_api/media_content_pending_moderation", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("content_type", &p_query_content_type.to_string())]);
    req_builder = req_builder.query(&[("queue", &p_query_queue.to_string())]);
    req_builder = req_builder.query(&[("show_content_which_bots_can_moderate", &p_query_show_content_which_bots_can_moderate.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-access-token", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetMediaContentPendingModerationList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetMediaContentPendingModerationList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetMediaContentPendingModerationListError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// # Access * Permission [model::Permissions::admin_edit_media_content_face_detected_value]
pub async fn post_media_content_face_detected_value(configuration: &configuration::Configuration, post_media_content_face_detected_value: models::PostMediaContentFaceDetectedValue) -> Result<(), Error<PostMediaContentFaceDetectedValueError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_post_media_content_face_detected_value = post_media_content_face_detected_value;

    let uri_str = format!("{}/media_api/media_content_face_detected_value", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-access-token", value);
    };
    req_builder = req_builder.json(&p_body_post_media_content_face_detected_value);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PostMediaContentFaceDetectedValueError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// This route will fail if the content is in slot.  Also profile visibility moves from pending to normal when all profile content is moderated as accepted.
pub async fn post_moderate_media_content(configuration: &configuration::Configuration, post_moderate_media_content: models::PostModerateMediaContent) -> Result<(), Error<PostModerateMediaContentError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_post_moderate_media_content = post_moderate_media_content;

    let uri_str = format!("{}/media_api/moderate_media_content", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-access-token", value);
    };
    req_builder = req_builder.json(&p_body_post_moderate_media_content);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PostModerateMediaContentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

