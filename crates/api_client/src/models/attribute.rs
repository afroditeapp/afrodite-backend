/*
 * afrodite-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Attribute {
    /// Client should show this attribute when editing a profile.
    #[serde(rename = "editable", skip_serializing_if = "Option::is_none")]
    pub editable: Option<bool>,
    /// Icon for the attribute.
    #[serde(rename = "icon", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub icon: Option<Option<String>>,
    #[serde(rename = "id")]
    pub id: i32,
    /// String unique identifier for the attribute.
    #[serde(rename = "key")]
    pub key: String,
    #[serde(rename = "max_filters", skip_serializing_if = "Option::is_none")]
    pub max_filters: Option<i32>,
    #[serde(rename = "max_selected", skip_serializing_if = "Option::is_none")]
    pub max_selected: Option<i32>,
    /// Mode of the attribute.
    #[serde(rename = "mode")]
    pub mode: models::AttributeMode,
    /// Default name for the attribute if translated value is not available.
    #[serde(rename = "name")]
    pub name: String,
    /// Attribute order number.
    #[serde(rename = "order_number")]
    pub order_number: i32,
    /// Client should ask this attribute when doing account initial setup.
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// Translations for attribute name and attribute values.
    #[serde(rename = "translations", skip_serializing_if = "Option::is_none")]
    pub translations: Option<Vec<models::Language>>,
    /// Attribute value ordering mode for client to determine in what order the values should be displayed.
    #[serde(rename = "value_order")]
    pub value_order: models::AttributeValueOrderMode,
    /// Top level values for the attribute.  Values are sorted by AttributeValue ID. Indexing with it is not possible as ID might be a bitflag value.
    #[serde(rename = "values")]
    pub values: Vec<models::AttributeValue>,
    /// Client should show this attribute when viewing a profile.
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<bool>,
}

impl Attribute {
    pub fn new(id: i32, key: String, mode: models::AttributeMode, name: String, order_number: i32, value_order: models::AttributeValueOrderMode, values: Vec<models::AttributeValue>) -> Attribute {
        Attribute {
            editable: None,
            icon: None,
            id,
            key,
            max_filters: None,
            max_selected: None,
            mode,
            name,
            order_number,
            required: None,
            translations: None,
            value_order,
            values,
            visible: None,
        }
    }
}

