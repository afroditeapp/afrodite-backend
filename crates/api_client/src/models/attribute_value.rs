/*
 * pihka-backend
 *
 * Pihka backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AttributeValue {
    #[serde(rename = "editable", skip_serializing_if = "Option::is_none")]
    pub editable: Option<bool>,
    #[serde(rename = "group_values", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub group_values: Option<Option<Box<crate::models::GroupValues>>>,
    #[serde(rename = "icon", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub icon: Option<Option<Box<crate::models::IconResource>>>,
    /// Numeric unique identifier for the attribute value. Note that the value must only be unique within a group of values, so value in top level group A, sub level group C and sub level group B can have the same ID.
    #[serde(rename = "id")]
    pub id: i32,
    /// Unique string identifier for the attribute value.
    #[serde(rename = "key")]
    pub key: String,
    /// Order number for client to determine in what order the values should be displayed.
    #[serde(rename = "order_number")]
    pub order_number: i32,
    /// English text for the attribute value.
    #[serde(rename = "value")]
    pub value: String,
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<bool>,
}

impl AttributeValue {
    pub fn new(id: i32, key: String, order_number: i32, value: String) -> AttributeValue {
        AttributeValue {
            editable: None,
            group_values: None,
            icon: None,
            id,
            key,
            order_number,
            value,
            visible: None,
        }
    }
}


