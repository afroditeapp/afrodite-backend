/*
 * afrodite-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChatProfileLink : Similar as [model_server_data::ProfileLink] but for chat component.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChatProfileLink {
    #[serde(rename = "a")]
    pub a: Box<models::AccountId>,
    /// This is optional because media component owns it.
    #[serde(rename = "c", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub c: Option<Option<Box<models::ProfileContentVersion>>>,
    /// Account's most recent disconnect time.  If the last seen time is not None, then it is Unix timestamp or -1 if the profile is currently online.
    #[serde(rename = "l", skip_serializing_if = "Option::is_none")]
    pub l: Option<i64>,
    /// This is optional because profile component owns it.
    #[serde(rename = "p", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub p: Option<Option<Box<models::ProfileVersion>>>,
}

impl ChatProfileLink {
    /// Similar as [model_server_data::ProfileLink] but for chat component.
    pub fn new(a: models::AccountId) -> ChatProfileLink {
        ChatProfileLink {
            a: Box::new(a),
            c: None,
            l: None,
            p: None,
        }
    }
}

