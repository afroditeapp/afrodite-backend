/*
 * pihka-backend
 *
 * Pihka backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LoginResult {
    #[serde(rename = "account")]
    pub account: Box<models::AuthPair>,
    #[serde(rename = "aid")]
    pub aid: Box<models::AccountId>,
    #[serde(rename = "email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email: Option<Option<String>>,
    #[serde(rename = "media", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub media: Option<Option<Box<models::AuthPair>>>,
    #[serde(rename = "profile", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub profile: Option<Option<Box<models::AuthPair>>>,
}

impl LoginResult {
    pub fn new(account: models::AuthPair, aid: models::AccountId) -> LoginResult {
        LoginResult {
            account: Box::new(account),
            aid: Box::new(aid),
            email: None,
            media: None,
            profile: None,
        }
    }
}

