/*
 * afrodite-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportContent {
    #[serde(rename = "chat_message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub chat_message: Option<Option<Box<models::ChatMessageReport>>>,
    #[serde(rename = "custom_report", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_report: Option<Option<Box<models::CustomReportContent>>>,
    #[serde(rename = "profile_content", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub profile_content: Option<Option<Box<models::ContentId>>>,
    #[serde(rename = "profile_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub profile_name: Option<Option<String>>,
    #[serde(rename = "profile_text", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub profile_text: Option<Option<String>>,
}

impl ReportContent {
    pub fn new() -> ReportContent {
        ReportContent {
            chat_message: None,
            custom_report: None,
            profile_content: None,
            profile_name: None,
            profile_text: None,
        }
    }
}

