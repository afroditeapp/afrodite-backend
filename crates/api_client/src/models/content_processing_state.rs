/*
 * dating-app-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentProcessingState {
    /// Content ID of the processed content.
    #[serde(rename = "cid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cid: Option<Option<Box<models::ContentId>>>,
    /// Face detected info of the processed content.
    #[serde(rename = "fd", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fd: Option<Option<bool>>,
    #[serde(rename = "state")]
    pub state: models::ContentProcessingStateType,
    /// Current position in processing queue.  If ProcessingContentId is added to empty queue, then this will be 1.
    #[serde(rename = "wait_queue_position", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub wait_queue_position: Option<Option<i64>>,
}

impl ContentProcessingState {
    pub fn new(state: models::ContentProcessingStateType) -> ContentProcessingState {
        ContentProcessingState {
            cid: None,
            fd: None,
            state,
            wait_queue_position: None,
        }
    }
}

