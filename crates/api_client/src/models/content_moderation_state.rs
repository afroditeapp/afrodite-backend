/*
 * afrodite-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ContentModerationState : Content moderation states  The states grouped like this:  - InSlot, If user uploads new content to slot the current will be removed. - InModeration, Content is in moderation. User can not remove the content. - ModeratedAsAccepted, Content is moderated as accepted.   User can not remove the content until specific time elapses. - ModeratedAsRejected, Content is moderated as rejected.   Content deleting is possible.
/// Content moderation states  The states grouped like this:  - InSlot, If user uploads new content to slot the current will be removed. - InModeration, Content is in moderation. User can not remove the content. - ModeratedAsAccepted, Content is moderated as accepted.   User can not remove the content until specific time elapses. - ModeratedAsRejected, Content is moderated as rejected.   Content deleting is possible.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ContentModerationState {
    #[serde(rename = "InSlot")]
    InSlot,
    #[serde(rename = "WaitingBotOrHumanModeration")]
    WaitingBotOrHumanModeration,
    #[serde(rename = "WaitingHumanModeration")]
    WaitingHumanModeration,
    #[serde(rename = "AcceptedByBot")]
    AcceptedByBot,
    #[serde(rename = "AcceptedByHuman")]
    AcceptedByHuman,
    #[serde(rename = "RejectedByBot")]
    RejectedByBot,
    #[serde(rename = "RejectedByHuman")]
    RejectedByHuman,

}

impl std::fmt::Display for ContentModerationState {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::InSlot => write!(f, "InSlot"),
            Self::WaitingBotOrHumanModeration => write!(f, "WaitingBotOrHumanModeration"),
            Self::WaitingHumanModeration => write!(f, "WaitingHumanModeration"),
            Self::AcceptedByBot => write!(f, "AcceptedByBot"),
            Self::AcceptedByHuman => write!(f, "AcceptedByHuman"),
            Self::RejectedByBot => write!(f, "RejectedByBot"),
            Self::RejectedByHuman => write!(f, "RejectedByHuman"),
        }
    }
}

impl Default for ContentModerationState {
    fn default() -> ContentModerationState {
        Self::InSlot
    }
}

