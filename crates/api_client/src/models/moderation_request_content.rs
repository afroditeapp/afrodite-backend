/*
 * dating-app-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModerationRequestContent {
    #[serde(rename = "c0")]
    pub c0: Box<models::ContentId>,
    #[serde(rename = "c1", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub c1: Option<Option<Box<models::ContentId>>>,
    #[serde(rename = "c2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub c2: Option<Option<Box<models::ContentId>>>,
    #[serde(rename = "c3", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub c3: Option<Option<Box<models::ContentId>>>,
    #[serde(rename = "c4", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub c4: Option<Option<Box<models::ContentId>>>,
    #[serde(rename = "c5", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub c5: Option<Option<Box<models::ContentId>>>,
    #[serde(rename = "c6", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub c6: Option<Option<Box<models::ContentId>>>,
}

impl ModerationRequestContent {
    pub fn new(c0: models::ContentId) -> ModerationRequestContent {
        ModerationRequestContent {
            c0: Box::new(c0),
            c1: None,
            c2: None,
            c3: None,
            c4: None,
            c5: None,
            c6: None,
        }
    }
}

