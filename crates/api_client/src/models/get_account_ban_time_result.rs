/*
 * afrodite-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetAccountBanTimeResult {
    /// If `None` the account is not banned.
    #[serde(rename = "banned_until", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub banned_until: Option<Option<Box<models::UnixTime>>>,
    #[serde(rename = "reason_category", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reason_category: Option<Option<Box<models::AccountBanReasonCategory>>>,
    #[serde(rename = "reason_details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reason_details: Option<Option<Box<models::AccountBanReasonDetails>>>,
}

impl GetAccountBanTimeResult {
    pub fn new() -> GetAccountBanTimeResult {
        GetAccountBanTimeResult {
            banned_until: None,
            reason_category: None,
            reason_details: None,
        }
    }
}

