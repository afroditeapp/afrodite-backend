/*
 * dating-app-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MyProfileContent : Current content in public profile.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MyProfileContent {
    /// Primary profile image which is shown in grid view.
    #[serde(rename = "c")]
    pub c: Vec<models::ContentInfoWithFd>,
    #[serde(rename = "grid_crop_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub grid_crop_size: Option<Option<f64>>,
    #[serde(rename = "grid_crop_x", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub grid_crop_x: Option<Option<f64>>,
    #[serde(rename = "grid_crop_y", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub grid_crop_y: Option<Option<f64>>,
}

impl MyProfileContent {
    /// Current content in public profile.
    pub fn new(c: Vec<models::ContentInfoWithFd>) -> MyProfileContent {
        MyProfileContent {
            c,
            grid_crop_size: None,
            grid_crop_x: None,
            grid_crop_y: None,
        }
    }
}

