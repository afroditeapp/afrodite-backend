/*
 * afrodite-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportDetailed {
    /// Only available when chat component is enabled and account interaction exists.
    #[serde(rename = "chat_info", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub chat_info: Option<Option<Box<models::ReportChatInfo>>>,
    #[serde(rename = "content")]
    pub content: Box<models::ReportContent>,
    /// Only available when profile component is enabled.
    #[serde(rename = "creator_info", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub creator_info: Option<Option<Box<models::ReportAccountInfo>>>,
    #[serde(rename = "info")]
    pub info: Box<models::ReportDetailedInfo>,
    /// Only available when profile component is enabled.
    #[serde(rename = "target_info", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub target_info: Option<Option<Box<models::ReportAccountInfo>>>,
}

impl ReportDetailed {
    pub fn new(content: models::ReportContent, info: models::ReportDetailedInfo) -> ReportDetailed {
        ReportDetailed {
            chat_info: None,
            content: Box::new(content),
            creator_info: None,
            info: Box::new(info),
            target_info: None,
        }
    }
}

