/*
 * afrodite-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportDetailed {
    /// Only available when account interaction exists.
    #[serde(rename = "chat_info", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub chat_info: Option<Option<Box<models::ReportChatInfo>>>,
    #[serde(rename = "content")]
    pub content: Box<models::ReportContent>,
    #[serde(rename = "creator_info")]
    pub creator_info: Box<models::ReportAccountInfo>,
    #[serde(rename = "info")]
    pub info: Box<models::ReportDetailedInfo>,
    #[serde(rename = "target_info")]
    pub target_info: Box<models::ReportAccountInfo>,
}

impl ReportDetailed {
    pub fn new(content: models::ReportContent, creator_info: models::ReportAccountInfo, info: models::ReportDetailedInfo, target_info: models::ReportAccountInfo) -> ReportDetailed {
        ReportDetailed {
            chat_info: None,
            content: Box::new(content),
            creator_info: Box::new(creator_info),
            info: Box::new(info),
            target_info: Box::new(target_info),
        }
    }
}

