/*
 * afrodite-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProfileUpdate {
    #[serde(rename = "age")]
    pub age: i64,
    #[serde(rename = "attributes")]
    pub attributes: Vec<models::ProfileAttributeValueUpdate>,
    /// A string wrapper that ensures the string is not empty. This type is used for TEXT columns that should not allow empty strings. In the database, these columns are NULL when there is no value, and this type represents non-NULL values that must be non-empty.
    #[serde(rename = "name")]
    pub name: String,
    /// A string wrapper that ensures the string is not empty. This type is used for TEXT columns that should not allow empty strings. In the database, these columns are NULL when there is no value, and this type represents non-NULL values that must be non-empty.
    #[serde(rename = "ptext", skip_serializing_if = "Option::is_none")]
    pub ptext: Option<String>,
}

impl ProfileUpdate {
    pub fn new(age: i64, attributes: Vec<models::ProfileAttributeValueUpdate>, name: String) -> ProfileUpdate {
        ProfileUpdate {
            age,
            attributes,
            name,
            ptext: None,
        }
    }
}

