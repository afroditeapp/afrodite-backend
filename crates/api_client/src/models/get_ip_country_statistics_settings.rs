/*
 * afrodite-backend
 *
 * Dating app backend API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetIpCountryStatisticsSettings : Time range is inclusive. [Self::max_time] must be greater or equal to [Self::min_time].
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetIpCountryStatisticsSettings {
    /// Get statistics from RAM instead of database.
    #[serde(rename = "data_from_ram")]
    pub data_from_ram: bool,
    #[serde(rename = "max_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_time: Option<Option<Box<models::UnixTime>>>,
    #[serde(rename = "min_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub min_time: Option<Option<Box<models::UnixTime>>>,
    #[serde(rename = "statistics_type")]
    pub statistics_type: models::IpCountryStatisticsType,
}

impl GetIpCountryStatisticsSettings {
    /// Time range is inclusive. [Self::max_time] must be greater or equal to [Self::min_time].
    pub fn new(data_from_ram: bool, statistics_type: models::IpCountryStatisticsType) -> GetIpCountryStatisticsSettings {
        GetIpCountryStatisticsSettings {
            data_from_ram,
            max_time: None,
            min_time: None,
            statistics_type,
        }
    }
}

